/*
Copyright 2022 The Koordinator Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
//

// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/yarn/client/factory.go

// Package mock_client is a generated GoMock package.
package mock_client

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	client "github.com/koordinator-sh/yarn-copilot/pkg/yarn/client"
)

// MockYarnClientFactory is a mock of YarnClientFactory interface.
type MockYarnClientFactory struct {
	ctrl     *gomock.Controller
	recorder *MockYarnClientFactoryMockRecorder
}

// MockYarnClientFactoryMockRecorder is the mock recorder for MockYarnClientFactory.
type MockYarnClientFactoryMockRecorder struct {
	mock *MockYarnClientFactory
}

// NewMockYarnClientFactory creates a new mock instance.
func NewMockYarnClientFactory(ctrl *gomock.Controller) *MockYarnClientFactory {
	mock := &MockYarnClientFactory{ctrl: ctrl}
	mock.recorder = &MockYarnClientFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockYarnClientFactory) EXPECT() *MockYarnClientFactoryMockRecorder {
	return m.recorder
}

// CreateAllYarnClients mocks base method.
func (m *MockYarnClientFactory) CreateAllYarnClients() (map[string]client.YarnClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAllYarnClients")
	ret0, _ := ret[0].(map[string]client.YarnClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAllYarnClients indicates an expected call of CreateAllYarnClients.
func (mr *MockYarnClientFactoryMockRecorder) CreateAllYarnClients() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAllYarnClients", reflect.TypeOf((*MockYarnClientFactory)(nil).CreateAllYarnClients))
}

// CreateDefaultYarnClient mocks base method.
func (m *MockYarnClientFactory) CreateDefaultYarnClient() (client.YarnClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDefaultYarnClient")
	ret0, _ := ret[0].(client.YarnClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDefaultYarnClient indicates an expected call of CreateDefaultYarnClient.
func (mr *MockYarnClientFactoryMockRecorder) CreateDefaultYarnClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDefaultYarnClient", reflect.TypeOf((*MockYarnClientFactory)(nil).CreateDefaultYarnClient))
}

// CreateYarnClientByClusterID mocks base method.
func (m *MockYarnClientFactory) CreateYarnClientByClusterID(clusterID string) (client.YarnClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateYarnClientByClusterID", clusterID)
	ret0, _ := ret[0].(client.YarnClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateYarnClientByClusterID indicates an expected call of CreateYarnClientByClusterID.
func (mr *MockYarnClientFactoryMockRecorder) CreateYarnClientByClusterID(clusterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateYarnClientByClusterID", reflect.TypeOf((*MockYarnClientFactory)(nil).CreateYarnClientByClusterID), clusterID)
}
