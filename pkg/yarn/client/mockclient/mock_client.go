/*
Copyright 2022 The Koordinator Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
//

// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/yarn/client/client.go

// Package mock_client is a generated GoMock package.
package mock_client

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	hadoopyarn "github.com/koordinator-sh/goyarn/pkg/yarn/apis/proto/hadoopyarn"
	server "github.com/koordinator-sh/goyarn/pkg/yarn/apis/proto/hadoopyarn/server"
)

// MockYarnClient is a mock of YarnClient interface.
type MockYarnClient struct {
	ctrl     *gomock.Controller
	recorder *MockYarnClientMockRecorder
}

// MockYarnClientMockRecorder is the mock recorder for MockYarnClient.
type MockYarnClientMockRecorder struct {
	mock *MockYarnClient
}

// NewMockYarnClient creates a new mock instance.
func NewMockYarnClient(ctrl *gomock.Controller) *MockYarnClient {
	mock := &MockYarnClient{ctrl: ctrl}
	mock.recorder = &MockYarnClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockYarnClient) EXPECT() *MockYarnClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockYarnClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockYarnClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockYarnClient)(nil).Close))
}

// GetClusterNodes mocks base method.
func (m *MockYarnClient) GetClusterNodes(request *hadoopyarn.GetClusterNodesRequestProto) (*hadoopyarn.GetClusterNodesResponseProto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterNodes", request)
	ret0, _ := ret[0].(*hadoopyarn.GetClusterNodesResponseProto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterNodes indicates an expected call of GetClusterNodes.
func (mr *MockYarnClientMockRecorder) GetClusterNodes(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterNodes", reflect.TypeOf((*MockYarnClient)(nil).GetClusterNodes), request)
}

// Initialize mocks base method.
func (m *MockYarnClient) Initialize() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize")
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize.
func (mr *MockYarnClientMockRecorder) Initialize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockYarnClient)(nil).Initialize))
}

// Reinitialize mocks base method.
func (m *MockYarnClient) Reinitialize() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reinitialize")
	ret0, _ := ret[0].(error)
	return ret0
}

// Reinitialize indicates an expected call of Reinitialize.
func (mr *MockYarnClientMockRecorder) Reinitialize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reinitialize", reflect.TypeOf((*MockYarnClient)(nil).Reinitialize))
}

// UpdateNodeResource mocks base method.
func (m *MockYarnClient) UpdateNodeResource(request *server.UpdateNodeResourceRequestProto) (*server.UpdateNodeResourceResponseProto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNodeResource", request)
	ret0, _ := ret[0].(*server.UpdateNodeResourceResponseProto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNodeResource indicates an expected call of UpdateNodeResource.
func (mr *MockYarnClientMockRecorder) UpdateNodeResource(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNodeResource", reflect.TypeOf((*MockYarnClient)(nil).UpdateNodeResource), request)
}
